[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tunnel-ai"
version = "1.0.0"
description = "Tunnel AI - Natural language to automated frontend tests using LangGraph, OpenAI, and Browserbase"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tunnel AI Team", email = "team@tunnel-ai.com"}
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
]

dependencies = [
    "langgraph>=0.2.44",
    "langchain>=0.3.0",
    "langchain-openai>=0.2.0",
    "openai>=4.0.0",
    "browserbase>=1.2.0",
    "playwright>=1.49.0",
    "fastapi>=0.115.0",
    "uvicorn>=0.32.0",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.10.0",
    "redis>=5.0.0",
    "loguru>=0.7.0",
    "httpx>=0.27.0",
    "jinja2>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-playwright>=0.5.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/tunnel-ai"
Documentation = "https://github.com/yourusername/tunnel-ai/wiki"
Repository = "https://github.com/yourusername/tunnel-ai.git"
Issues = "https://github.com/yourusername/tunnel-ai/issues"

[project.scripts]
tunnel-ai = "api.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["agents*", "api*", "core*", "orchestrator*", "templates*", "config*"]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["agents", "api", "core", "orchestrator"]
omit = ["*/tests/*", "*/__pycache__/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]